import { Alert, Box, Button, Card, CardActions, CardContent, CardMedia, CircularProgress, Container, Snackbar, TextField, Typography } from "@mui/material";
import Head from "next/head"
import { useContext, useState } from "react";
import Maps from "../components/shared/Maps";
import getPhotosPlaces from "../services/photoPlaces";
import { BuscarContext } from "../store/buscar";



const Search = () => {

  const { therm, setTherm } = useContext(BuscarContext);
  const [loading, setLoading] = useState(false);
  const [modalMapOpen, setModalMapOpen] = useState(false);
  const [place, setPlace] = useState({ src: '', title: '', therm: '' })
  const [error, setError] = useState(false);
  const [sucess, setSucess] = useState(false);
  const [errorMessage, setErrorMessage] = useState('Informe o lugar desejado!')



  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }

    setError(false);
    setModalMapOpen(false);
  };


  const handleCloseSucess = (event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }

    setSucess(false);
    setModalMapOpen(false);
  };

  const handleChange = (newValue: string) => {
    setTherm(newValue)
  }
  const handleSearch = async () => {


    if (therm) {

      setLoading(true)

      try {
        const photo = await (await getPhotosPlaces(therm)).json();

        if (photo.message) {
          setLoading(false);
          setErrorMessage(photo.message);
          setError(true);
        } else {

          setPlace({ ...place, src: photo[0].image.url, title: photo[0].title, therm: therm })
        }
        console.log(photo)
      } catch (error) {
        console.log(error)
        setErrorMessage(error.message);
        setError(true);
      }
      finally {

        setTimeout(() => {
          setLoading(false);
          !error && setModalMapOpen(true);
          document.querySelector('input').value = "";
        }, 2000)
      }
    } else {
      setError(true);
    }


  }
  console.log(place)

  const handleList = () => {
    const currentPlace = JSON.parse(localStorage.getItem('USER_PLACES')) || [];

    if(currentPlace.find((item) => item.title === place.title)) {
        setErrorMessage("Esse lugar já consta em sua lista");
        setError(true);
    } else {

      currentPlace.push(place);
      localStorage.setItem('USER_PLACES', JSON.stringify(currentPlace));
      setSucess(true)
    }

  }



  return (
    <div >
      <Head>
        <title>No rolê - Buscar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth='lg'>

        <Typography variant="h5" component="h2">Encontre o rolê perfeito</Typography>


        <form className="form" >
          <TextField id="outlined-basic" label="Lugar" fullWidth variant="outlined" margin='normal' onChange={(e) => { handleChange(e.target.value) }} />
          <Button type="submit" variant='contained' fullWidth color="info" sx={{ backgroundColor: "black" }} onClick={(e) => { e.preventDefault(); handleSearch() }}>Buscar</Button>
        </form>
        <Snackbar open={error} autoHideDuration={6000} onClose={handleClose}>
          <Alert onClose={handleClose} severity="error" sx={{ width: '100%', marginBottom: '80%' }}>
            {errorMessage}
          </Alert>
        </Snackbar>
        {loading && <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: '40%' }}><CircularProgress sx={{ color: 'rgb(98,6,35)' }} /></Box>
        }
        {modalMapOpen &&
          <Box maxWidth="1000%" height='auto' sx={{ marginBottom: '58px', marginTop: '10px' }}>
            <Card sx={{ maxWidth: 345, marginLeft: 'auto', marginRight: 'auto' }}>
              <Maps place={place} />
              <CardActions>
                <Button size='small' variant="contained" sx={{ backgroundColor: 'rgb(98,6,35)' }} onClick={handleList}>Salvar</Button>
              </CardActions>
            </Card>
          </Box>

        }
        <Snackbar open={sucess} autoHideDuration={6000} onClose={handleCloseSucess}>
          <Alert onClose={handleCloseSucess} severity='success' sx={{ width: '100%', marginBottom: '80%' }}>
            Lugar salvo com sucesso!
          </Alert>
        </Snackbar>

      </Container>
    </div>
  )
}

export default Search;